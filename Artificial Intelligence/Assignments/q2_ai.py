# -*- coding: utf-8 -*-
"""Q2 AI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MBpeUpOoodWX9pXhXqeBDee3HGiph6Z3
"""

from pprint import pprint 

boardSize = 8

placedQueens = [None for i in range(boardSize)]
AttackingSquares = [ [0 for i in range(boardSize)] for j in range(boardSize) ] # array for marking squares that are being attacked given the current placement of queens.
                                                                               # 0: safe ; 1: attacked 
    
def solveNQueenWithForwardCheck(col):

  if (col == boardSize): # base case
    print("sol: ",placedQueens)
    return True

  for i in range(boardSize):

    if (AttackingSquares[i][col] == 0): # if current square is safe
      placedQueens[col] = i # place the queen in current square

      recalculateThreatenedFields(1, i, col) # update the AttackingSquares array to account for the placement of the new queen

      if (isSolutionPossible(col)): # forward check to see if solution is possible using the updated values of AttackingSquares array
        if (solveNQueenWithForwardCheck(col + 1)): # if true, move to next column to place the next queen
          return True
        
      recalculateThreatenedFields(0, i, col) # backtrack and return to orginal state
   
  return False # if no solution found, returne false 

def recalculateThreatenedFields(val,row,col): 

  for i in range(col+1,boardSize): 
    
    AttackingSquares[row][i] = val # modify squares horizontally
  
  for j in range(1,boardSize - col): 
    if (row + j < boardSize):
      AttackingSquares[row + j][col + j] = val # modify squares diagonally down

    if (row - j >= 0):
      AttackingSquares[row - j][col + j] = val # modify squares diagonally up
  


def isSolutionPossible(col):

  # return True if there is at least one non-threatening queen that can be placed in each column. Otherwise, returns false
  for i in range(col + 1 , boardSize):
      
    isAbleToPlaceInCurrentColumn = False

    for row in range(boardSize):

      if (AttackingSquares[row][i] == 0):     # if no queens threat that field
        isAbleToPlaceInCurrentColumn = True  
        break
      
  
    if (not isAbleToPlaceInCurrentColumn): # if not able to place a queen in current column, return false
      return False
  
  return True



solveNQueenWithForwardCheck(0)

